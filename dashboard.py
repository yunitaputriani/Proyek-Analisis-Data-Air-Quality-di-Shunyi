# -*- coding: utf-8 -*-
"""dashboard.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HB-mXXjurKsX1J4VURrGl9stmz1kGd7m
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
sns.set_style("whitegrid")

# Fungsi Air Parameters (Hujan dan Kecepatan Udara)
def air_parameters_df(df, option):
    df['yr'] = df['year']
    df['mo'] = df['month']
    df['dd'] = df ['day']
    df['hr'] =df['hour']
    df['hujan'] = df['RAIN']
    df['kecepatan udara'] = df['WSPM']
    df['SO_2'] = df['SO2']
    df['NO_2'] = df['NO2']
    df['CO_'] = df['CO']
    df['O_3'] = df['O3']
    air_parameters_df = df[['yr', 'mo', 'dd', 'hr', 'hujan', 'kecepatan udara']].copy()
    air_parameters_df = air_parameters_df.rename(columns ={
        'yr' :'year',
        'mo' :'month',
        'dd' : 'day',
        'hr' :'hour',
        'hujan' : 'RAIN',
        'kecepatan udara' : 'WSPM'})
    if (option == "1 Day"):
        air_parameters_df = df.groupby(by = ['year', 'month', 'day','hour'] ).agg({
            "RAIN" : "mean",
            "WSPM" : "mean"}).sort_values(by = ['year', 'month', 'day','hour'], ascending = True)
        air_parameters_df = air_parameters_df.reset_index()
        air_parameters_df['time'] = air_parameters_df["hour"].astype(str) + ":00"
    elif (option == "Daily"):
        air_parameters_df = df.groupby(by = ['year', 'month', 'day'] ).agg({
            "RAIN" : "mean",
            "WSPM" : "mean"}).sort_values(by = ['year', 'month', 'day'], ascending = True)
        air_parameters_df = air_parameters_df.reset_index()
        air_parameters_df['time'] = air_parameters_df["year"].astype(str) + "-" + air_parameters_df["month"].astype(str) + "-" + air_parameters_df["day"].astype(str)
    elif (option == "Monthly"):
        air_parameters_df = df.groupby(by = ['year', 'month'] ).agg({
            "RAIN" : "mean",
            "WSPM" : "mean"}).sort_values(by = ['year', 'month'], ascending = True)
        air_parameters_df = air_parameters_df.reset_index()
        air_parameters_df['time'] = air_parameters_df["year"].astype(str) + "-" + air_parameters_df["month"].astype(str)
    else:
        air_parameters_df = df.groupby(by = ['year'] ).agg({
            "RAIN" : "mean",
            "WSPM" : "mean"}).sort_values(by = ['year'], ascending = True)
        air_parameters_df = air_parameters_df.reset_index()
        air_parameters_df['time'] = air_parameters_df["year"].astype(str)
    return air_parameters_df
def airparameters_display(df):
    hujan= round(df['RAIN'].mean(), 2)
    kecepatan_udara= round(df['WSPM'].mean(), 2)

    with st.container():
        col1, col2= st.columns(2)
        with col1:
            st.metric("Rain:", value = str(hujan) + " mm")
        with col2:
                st.metric("Wind Speed:", value = str(kecepatan_udara) + " km/s")
def air_parameters_graph(df):
    with st.expander("Rain"):
        fig, ax = plt.subplots(figsize=(16, 8))
        ax.plot(df['time'], df['RAIN'], marker='o', linewidth=2, color="#39064B")
        ax.tick_params(axis='y', labelsize=20)
        ax.tick_params(axis='x', labelsize=20, labelrotation = 45)
        ax.set_ylabel("Rain (mm)", fontsize=25)
        ax.set_title("Rain", loc="center", fontsize=35)
        st.pyplot(fig)

    with st.expander("Wind Speed"):
        fig, ax = plt.subplots(figsize=(16, 8))
        ax.plot(df['time'], df['WSPM'], marker='o', linewidth=2, color="#39064B")
        ax.tick_params(axis='y', labelsize=20)
        ax.tick_params(axis='x', labelsize=20, labelrotation = 45)
        ax.set_ylabel("Wind Speed (km/s)", fontsize=25)
        ax.set_title("Wind Speed", loc="center", fontsize=35)
        st.pyplot(fig)

# Fungsi Dew Point
def dewp_df(df, option):
    df['yr'] = df['year']
    df['mo'] = df['month']
    df['dd'] = df ['day']
    df['hr'] =df['hour']
    df['dewp'] = df['WSPM']
    dewp_df = df[['yr', 'mo', 'dd', 'hr', 'dewp']].copy()
    dewp_df = dewp_df.rename(columns ={
        'yr' :'year',
        'mo' :'month',
        'dd' : 'day',
        'hr' :'hour'})
    if (option == "1 Day"):
        dewp_df = df.groupby(by = ['year', 'month', 'day','hour'] ).agg({
            "dewp" : "mean"}).sort_values(by = ['year', 'month', 'day','hour'], ascending = True)
        dewp_df = dewp_df.reset_index()
        dewp_df['time'] = dewp_df["hour"].astype(str) + ":00"
    elif (option == "Daily"):
        dewp_df = df.groupby(by = ['year', 'month', 'day'] ).agg({
            "dewp" : "mean"}).sort_values(by = ['year', 'month', 'day'], ascending = True)
        dewp_df = dewp_df.reset_index()
        dewp_df['time'] = dewp_df["year"].astype(str) + "-" + dewp_df["month"].astype(str) + "-" + dewp_df["day"].astype(str)
    elif (option == "Monthly"):
        dewp_df = df.groupby(by = ['year', 'month'] ).agg({
            "dewp" : "mean"}).sort_values(by = ['year', 'month'], ascending = True)
        dewp_df = dewp_df.reset_index()
        dewp_df['time'] = dewp_df["year"].astype(str) + "-" + dewp_df["month"].astype(str)
    else:
        dewp_df = df.groupby(by = ['year'] ).agg({
            "dewp" : "mean"}).sort_values(by = ['year'], ascending = True)
        dewp_df = dewp_df.reset_index()
        dewp_df['time'] = dewp_df["year"].astype(str)
    return dewp_df
def dewp_graph(df):
    fig, ax = plt.subplots(figsize=(16, 8))
    ax.plot(df['time'], df['dewp'], marker='o', linewidth=2, color="#BD1266")
    ax.tick_params(axis='y', labelsize=20)
    ax.tick_params(axis='x', labelsize=20, labelrotation = 45)
    ax.set_ylabel("Dew Point (°C)", fontsize=25)
    ax.set_title("Dew Point", loc="center", fontsize=35)
    st.pyplot(fig)

# Data
all_df = pd.read_csv("all_data.csv")
all_df.sort_values(by="date_time", inplace=True)
all_df.reset_index(inplace=True)
all_df['date_time'] = pd.to_datetime(all_df['date_time'], format='%Y-%m-%d %H:%M:%S')

#extract date_time
min_date = all_df['date_time'].min()
max_date = all_df['date_time'].max()

st.title("Air Quality in Shunyi")
with st.sidebar:
    option = st.selectbox("Tampilkan data:", ("1 Day", "Daily", "Monthly", "Yearly"))
if (option == "1 Day") :
    # Mengambil exact date dari date_input
    with st.sidebar:
        exact_date = st.date_input(
            label='Tanggal',
            min_value= min_date,
            max_value= max_date,
            value= None,
            format = "YYYY-MM-DD"
        )
        start_time = st.time_input(
            label = "Awal" ,
            value = None,
            step = 3600
        )
        end_time = st.time_input(
            label = "Akhir" ,
            value = None,
            step = 3600
        )

    date_start = str(exact_date) + " " + str(start_time)
    date_end = str(exact_date) + " " + str(end_time)


    main_df = all_df[(all_df['date_time'].astype(str) >= date_start) &
                     (all_df['date_time'].astype(str) <= date_end)]
    air_parameters = air_parameters_df(main_df, option)
    # Visualisasi Data Air Parameter
    with st.container():
        st.header("Air Parameters in Shunyi")
        airparameters_display(air_parameters)
        air_parameters_graph(air_parameters)

    # Dew Point (TItik Embum)
    dewp = dewp_df(main_df, option)

    with st.container():
        st.header("Dew Point in Shunyi")
        with st.container():
            st.subheader("Dew Point")
            col1, col2 = st.columns([1,4])
            with col1:
                mean = round(dewp['dewp'].mean(), 2)
                st.metric("Dew Point: ", str(mean)+ " °C")
            with col2:
                with st.expander("Dew Point Graph"):
                    dewp_graph(dewp)

elif (option == "Daily"):
    with st.sidebar:
    # Mengambil exact date dari date_input
        start_date, end_date = st.date_input(
            label='Tanggal',
            min_value= min_date,
            max_value= max_date,
            value= [min_date, max_date]
            )

    date_start = str(start_date) + " 00:00:00"
    date_end = str(end_date) + " 23:00:00"

    main_df = all_df[(all_df['date_time'].astype(str) >= date_start) &
                     (all_df['date_time'].astype(str) <= date_end)]
    air_parameters = air_parameters_df(main_df, option)
    # Visualisasi Data Air Parameter
    with st.container():
        st.header("Air Parameters in Shunyi")
        airparameters_display(air_parameters)
        air_parameters_graph(air_parameters)
    #Dew Point
    dewp = dewp_df(main_df, option)

    with st.container():
        st.header("Dew Point in Shunyi")
        with st.container():
            st.subheader("Dew Point")
            col1, col2 = st.columns([1,4])
            with col1:
                mean = round(dewp['dewp'].mean(), 2)
                st.metric("Dew Point: ", str(mean)+ " °C")
            with col2:
                with st.expander("Dew Point Graph"):
                    dewp_graph(dewp)
elif (option == "Monthly"):
    with st.sidebar:
        # Mengambil exact date dari date_input
        start_date_bulan, end_date_bulan = st.date_input(
            label='Tanggal',
            min_value= min_date,
            max_value= max_date,
            value= [min_date, max_date]
        )

    date_start = str(start_date_bulan) + " 00:00:00"
    date_end = str(end_date_bulan) + " 23:00:00"

    main_df = all_df[(all_df['date_time'].astype(str) >= date_start) &
                     (all_df['date_time'].astype(str) <= date_end)]

    air_parameters = air_parameters_df(main_df, option)
    # Visualisasi Data Air Parameter
    with st.container():
        st.header("Air Parameters in Shunyi")
        airparameters_display(air_parameters)
        air_parameters_graph(air_parameters)
    #Dew Point
    dewp = dewp_df(main_df, option)

    with st.container():
        st.header("Dew Point in Shunyi")
        with st.container():
            st.subheader("Dew Point")
            col1, col2 = st.columns([1,4])
            with col1:
                mean = round(dewp['dewp'].mean(), 2)
                st.metric("Dew Point: ", str(mean)+ " °C")
            with col2:
                with st.expander("Dew Point Graph"):
                    dewp_graph(dewp)

else:
    # Mengambil exact date dari date_input
    with st.sidebar:
        start_date_tahun, end_date_tahun = st.date_input(
            label='Tanggal',
            min_value = min_date,
            max_value = max_date,
            value = [min_date, max_date]
        )

    date_start = str(start_date_tahun) + " 00:00:00"
    date_end = str(end_date_tahun) + " 23:00:00"

    main_df = all_df[(all_df['date_time'].astype(str) >= date_start) &
                     (all_df['date_time'].astype(str) <= date_end)]

    air_parameters = air_parameters_df(main_df, option)

    # Visualisasi Data Air Parameter
    with st.container():
        st.header("Air Parameters in Shunyi")
        airparameters_display(air_parameters)
        air_parameters_graph(air_parameters)
    #Dew Point
    dewp = dewp_df(main_df, option)

    with st.container():
        st.header("Dew Point in Shunyi")
        with st.container():
            st.subheader("Dew Point")
            col1, col2 = st.columns([1,4])
            with col1:
                mean = round(dewp['dewp'].mean(), 2)
                st.metric("Dew Point: ", str(mean)+ " °C")
            with col2:
                with st.expander("Dew Point Graph"):
                    dewp_graph(dewp)